name: Build MT798X immortalWrt

on:
  workflow_dispatch:
    inputs:
      release:
        description: '是否发布到Release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      use_ccache:
        description: '是否使用ccache'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  TZ: Asia/Shanghai

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-22.04
    steps:
      - name: Environment Prepare
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo bash -c 'bash <(curl -s -L https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E apt-get -qq install libfuse-dev
          sudo timedatectl set-timezone "$TZ"
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo -E apt-get -qq install nodejs

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Checkout ImmortalWrt
        uses: actions/checkout@v4
        with:
          repository: solarflows/AutoWorkflows
          path: AutoWorkflows

      - name: Checkout ImmortalWrt
        uses: actions/checkout@v4
        with:
          repository: solarflows/immortalwrt-mt798x
          ref: test
          path: openwrt

      - name: Cache
        if: github.event.inputs.use_ccache == 'true'
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{ github.workspace }}/openwrt

      - name: Update feeds
        run: |
          cd openwrt
          git clone https://github.com/solarflows/openwrt-packages.git package/solarflows -b mt798x
          ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: Apply Configuration
        run: |
          cd openwrt
          cp AutoWorkflows/.github/openwrt-builder/immortalwrt-mt798x/mt798x.config .config
          make defconfig

      - name: Download package
        id: package
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Build Firmware
        run: |
          cd openwrt
          make -j$(($(nproc) + 1)) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -hT
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt_release
          path: |
            openwrt/bin/targets/mediatek/mt7981/*squashfs-sysupgrade.bin

      - name: Prepare Release
        if: github.event.inputs.release == 'true'
        run: |
          cd openwrt
          # 创建版本目录
          mkdir -p openwrt_release
          # 收集固件文件
          cp bin/targets/mediatek/mt7981/*.bin openwrt_release/
          # 打包额外文件
          tar czvf openwrt_release/base.tgz -C bin/packages/aarch64_cortex-a53/base .
          tar czvf openwrt_release/luci.tgz -C bin/packages/aarch64_cortex-a53/luci .
          tar czvf openwrt_release/packages.tgz -C bin/packages/aarch64_cortex-a53/packages .

      - name: Generate Release Tag
        if: github.event.inputs.release == 'true'
        id: set_date
        run: echo "RELEASE_DATE=R$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.set_date.outputs.RELEASE_DATE }}
          name: OpenWRT ${{ steps.set_date.outputs.RELEASE_DATE }}
          files: |
            openwrt/openwrt_release/*
